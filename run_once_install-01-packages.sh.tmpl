#!/usr/bin/env zsh

declare -a rust_utils=(
"exa"
"bat"
"xh"
"mcfly"
"cargo-update"
"fd-find"
"git-delta"
"difftastic"
"just"
"ripgrep"
"skim"
# "starship"
"tealdeer"
"topgrade"
"zoxide"
"sd"
"bottom"
"dua"
"xd"
"jql"
"macchina"
"gping"
"ag"
"pueue"
)

{{ if eq .chezmoi.os "linux" -}}

rust_utils+=("starship")

{{   if (.chezmoi.osRelease.name | contains "Arch Linux") }}
 yay_executable=$(which yay)
 if [ ! -x "$yay_executable" ] ; then
  sudo pacman -Syu --needed base-devel git

  cd /tmp
  git clone https://aur.archlinux.org/yay.git
  cd yay
  makepkg -si
 fi

# udpate db and install packages
yay -Syu --needed \
  vim \
  sudo \
  unrar \
  unzip \
  duf \
  restic \
  reflector \
  snapraid \
  tmux \
  tar \
  rsync \
  reflector \
  mergerfs \
  fzf \
  htop \
  grc \
  fish \
  docker \
  docker-compose \
  curl \
  cloudflared-bin \
  neovim \
  aws-cli-v2-bin

# clean unused dependencies
yay -c
{{  else if (.chezmoi.osRelease.name | contains "Debian") }}
sudo apt update
sudo apt -y upgrade
sudo apt -y install \
  curl \
  build-essential \
  pkg-config \
  libssl-dev \
  neovim \
  vim \
  git \
  htop \
  grc \
  fish \
  tar \
  rsync \
  fzf \
  python3-pip \
  awscli
pip3 install pynvim
{{   end }}
{{ else if eq .chezmoi.os "darwin" -}}
brew bundle --no-lock --file=/dev/stdin <<EOF
brew "fish"
brew "awscli"
brew "figlet"
brew "fzf"
brew "duf"
brew "git"
brew "grc"
brew "htop"
brew "btop"
brew "jq"
brew "neofetch"
brew "neovim"
brew "restic"
brew "rsync"
brew "tmux"
brew "unison"
brew "less"
brew "starship"
cask "alacritty"
cask "alfred"
cask "lunar"
cask "shifty"
cask "finicky"
cask "busycal"
cask "font-iosevka"
cask "font-iosevka-nerd-font"
cask "font-iosevka-slab"
cask "font-iosevka-etoile"
cask "font-iosevka-aile"
cask "font-iosevka-curly"
cask "font-iosevka-curly-slab"
cask "hiddenbar"
cask "plexamp"
cask "stats"
cask "visual-studio-code"
EOF
{{ end -}}

curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain none

declare -a rustup_components=(
"rust-docs"
"clippy"
"llvm-tools"
"rust-analyzer"
"rustfmt"
"cargo"
"rust-std"
)

rustup toolchain install nightly

for var in ${rustup_components[@]}
do
  rustup component add $var
  rustup component add --toolchain nightly $var
done

for var in ${rust_utils[@]}
do
  cargo install $var --locked
done
