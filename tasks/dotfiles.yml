---
- block:
    - name: Create dotfiles directories
      file:
        path: '{{ item }}'
        state: directory
      with_items:
        - '{{ dotfiles_home }}'
        - '{{ dotfiles_home }}/caches'
        - '{{ dotfiles_home }}/backups'
        - '{{ dotfiles_home }}/caches/nvim'
        - '{{ dotfiles_home }}/link'
        - '{{ dotfiles_home }}/source'

    - name: Create config directories
      file:
        path: '{{ dotfiles_home }}/link/{{ item }}'
        state: directory
      with_items: '{{ linked_config_folders }}'

    - name: Find manually installed progreams
      find:
        paths: /home/{{ username }}/programs
        recurse: yes
        file_type: directory
      register: manual_programs

    - name: Template linked dotfiles
      template:
        src: 'dotfiles/link/{{ item }}'
        dest: '{{ dotfiles_home }}/link/{{ item }}'
      with_items: '{{ linked_dotfiles }}'

    - name: Copy static sourced dotfiles
      template:
        src: '{{ item }}'
        dest: '{{ dotfiles_home }}/source/'
      with_fileglob: '{{ playbook_dir }}/templates/dotfiles/source/*'

    - name: Update static file permissions
      file:
        path: '{{ item }}'
        state: file
        mode: 0755
      with_fileglob: '{{ dotfiles_home }}/source/*'

    - name: Gather nested template files
      file:
        path: '{{ dotfiles_home }}/link/{{ item.path }}'
        state: directory
      with_filetree: '{{ playbook_dir }}/templates/dotfiles/link/config'
      when: item.state == 'directory'

    - name: Generate nested template files
      template:
        src: '{{ item.src }}'
        dest: '{{ dotfiles_home }}/link/{{ item.path }}'
      with_filetree: '{{ playbook_dir }}/templates/dotfiles/link/config'
      when: item.state == 'file'

    - name: Check existing dotfiles
      stat:
        path: '/home/{{ username }}/{{ item }}'
      with_items: '{{ linked_dotfiles }}'
      register: dotfiles_stat

    # - debug:
    #     var: dotfiles_stat

    - name: Backup existing dotfiles if they aren't links to our dotfiles
      copy:
        src: '/home/{{ username }}/{{ item.item }}'
        dest: '{{ dotfiles_home }}/backups'
      with_items: '{{ dotfiles_stat.results }}'
      when:
        - not item is skipped
        - item.stat.exists == true
        - item.stat.islnk == false

    - name: Remove existing dotfiles if they aren't links to our dotfiles
      file:
        path: '/home/{{ username }}/{{ item.item }}'
        state: absent
      with_items: '{{ dotfiles_stat.results }}'
      when:
        - not item is skipped
        - item.stat.exists == true
        - item.stat.islnk == false

    - name: Link dotfiles
      file:
        src: '{{ dotfiles_home }}/link/{{ item }}'
        dest: '/home/{{ username }}/{{ item }}'
        state: link
      with_items: '{{ linked_dotfiles }}'

    - name: Update dotfile permissions
      file:
        path: '{{ dotfiles_home }}/link/{{ item }}'
        mode: '+x'
      with_items: '{{ executable_dotfiles }}'

    - name: Create config folder
      file:
        path: '/home/{{ username }}/.config'
        state: directory

    - name: Link config folders and files
      file:
        src: '{{ dotfiles_home }}/link/{{ item }}'
        dest: '/home/{{ username }}/.config/{{ item }}'
        state: link
      with_items:
        - '{{ linked_config_folders }}'
        - '{{ linked_config_files }}'

    - name: Create and set SSH folder permissions
      file:
        path: '/home/{{ username }}/.ssh'
        mode: 0700
        state: directory

    - name: Copy SSH Files
      copy:
        src: '{{ playbook_dir }}/templates/dotfiles/ssh/'
        dest: '/home/{{ username }}/.ssh'

    - name: Set SSH file permissions
      file:
        path: '{{ item.src }}'
        mode: 0600
      with_filetree: '/home/{{ username }}/.ssh'
      when: item.state == 'file'

    - name: Add GitHub keys to authorized_keys
      authorized_key:
        user: '{{ username }}'
        state: present
        key: https://github.com/chadjvw.keys
        validate_certs: False

    - name: Update public SSH file permissions
      file:
        path: '{{ item }}'
        mode: 0644
      with_fileglob:
        - '/home/{{ username }}/.ssh/*.pub'
        - '/home/{{ username }}/.ssh/authorized_keys'
        - '/home/{{ username }}/.ssh/known_hosts'
        - '/home/{{ username }}/.ssh/config'

    - name: Install/update neovim packages
      shell: 'nvim -N -u /home/{{ username }}/.config/nvim/init.vim -c "try | call dein#update() | finally | qall! | endtry" -V1 -es'

    - name: Locate Fish Shell
      shell: which fish
      register: fish_shell

    - name: Update Fisher packages
      shell: 'fisher'
      args:
        executable: '{{ fish_shell.stdout }}'

  become: yes
  become_user: '{{ username }}'
