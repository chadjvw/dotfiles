[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'neovim/nvim-lspconfig'
depends = 'impatient.nvim'
# on_ft = ['typescript', 'go']
if = 'has("nvim")'
depends = 'ddc.vim'

[[plugins]]
repo = 'kabouzeid/nvim-lspinstall'
depends = 'nvim-lspconfig'
hook_source = '''
lua << EOF
local function setup_servers()
  require'lspinstall'.setup()
  local servers = require'lspinstall'.installed_servers()
  for _, server in pairs(servers) do
    require'lspconfig'[server].setup{}
  end
end

setup_servers()

-- Automatically reload after `:LspInstall <server>` so we don't have to restart neovim
require'lspinstall'.post_install_hook = function ()
  setup_servers() -- reload installed servers
  vim.cmd("bufdo e") -- this triggers the FileType autocmd that starts the server
end
EOF
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
hook_source = '''
let g:context_filetype#ignore_patterns = {
    \ 'toml': ['^\s*#\s*'],
    \ }
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
depends = 'nvim-web-devicons'
on_lua = 'nvim-tree'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_post_update = 'TSUpdate'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ignore_install = { 'haskell' }
    ensure_installed = 'maintained',
    highlight = {
        enable = true,
        disable = {},
    },
}
EOF
'''

[[plugins]]
repo = 'gelguy/wilder.nvim'
depends = 'impatient.nvim'
on_map = ':'
hook_source = '''
silent! call wilder#enable_cmdline_enter()
set wildcharm=<Tab>
cnoremap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
cnoremap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
" only / and ? are enabled by default
call wilder#set_option('modes', ['/', '?', ':'])
" When the cmdline is empty, provide suggestions based on the cmdline history
call wilder#set_option('pipeline', [
      \   wilder#branch(
      \     [
      \       wilder#check({_, x -> empty(x)}),
      \       wilder#history(),
      \     ],
      \     wilder#cmdline_pipeline(),
      \     wilder#search_pipeline(),
      \   ),
      \ ])
" popupmenu completion
call wilder#set_option('renderer', wilder#popupmenu_renderer({
    \ 'highlighter': wilder#basic_highlighter(),
    \ }))
'''

[[plugins]]
repo = 'joker1007/vim-markdown-quote-syntax'
on_ft = 'markdown'

# To improve neovim startup time
[[plugins]]
repo = 'lewis6991/impatient.nvim'
on_lua = 'impatient'
if = 'has("nvim")'
# hook_source = '''
#   lua require('impatient')
# '''

[[plugins]]
repo = 'yggdroot/indentline'
hook_add = '''
let g:indentline_char = 'Â¦'
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'b3nj5m1n/kommentary'