require 'impatient'

local api = vim.api
local cmd = vim.cmd -- to execute Vim commands e.g. cmd('pwd')
local fn = vim.fn -- to call Vim functions e.g. fn.bufnr()
local g = vim.g -- a table to access global variables
local opt = vim.opt -- to set options

-- Map leader to space
g.mapleader = [[ ]]
g.maplocalleader = [[,]]

local function map(mode, lhs, rhs, opts)
    local options = {
        noremap = true
    }

    if opts then
        options = vim.tbl_extend("force", options, opts)
    end

    api.nvim_set_keymap(mode, lhs, rhs, options)
end

local install_path = fn.stdpath('data') .. '/site/pack/packer/start/packer.nvim'
if fn.empty(fn.glob(install_path)) > 0 then
    packer_bootstrap = fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim',
                                  install_path})
end

require('plugins')
-- require('packer_compiled')

-- local dein_dir = fn.expand('{{ .chezmoi.homeDir }}/.cache/dein')
-- local dein_repo_dir = dein_dir..'/repos/github.com/Shougo/dein.vim'

-- -- bootstrap dein
-- if not string.find(api.nvim_get_option('runtimepath'), '/dein.vim') then
--   if not (fn.isdirectory(dein_repo_dir) == 1) then
--     os.execute('git clone https://github.com/Shougo/dein.vim '..dein_repo_dir)
--   end

--   api.nvim_set_option('runtimepath', dein_repo_dir..','..api.nvim_get_option('runtimepath'))
-- end

-- g['dein#lazy_rplugins'] = 1
-- g['dein#install_check_diff '] = 1
-- g['dein#install_progress_type'] = 'title'
-- g['dein#enable_notification'] = 1
-- g['dein#install_log_filename'] = '{{ .chezmoi.homeDir }}/.config/nvim/dein-install.log'

-- if (fn['dein#load_state'](dein_dir) == 1) then
--   local rc_dir = fn.expand('{{ .chezmoi.homeDir }}/.config/nvim')

--   local toml = rc_dir..'/dein.toml'
--   local filetype = rc_dir..'/deinft.toml'
--   local lazy_toml = rc_dir..'/dein_lazy.toml'
--   local ddc_toml = rc_dir..'/ddc.toml'

--   fn['dein#begin'](dein_dir, { toml, filetype, lazy_toml, ddc_toml })

--   fn['dein#load_toml'](toml, { lazy = 0 })
--   fn['dein#load_toml'](filetype, { lazy = 0 })
--   fn['dein#load_toml'](lazy_toml, { lazy = 1 })
--   fn['dein#load_toml'](ddc_toml, { lazy = 1 })

--   fn['dein#end']()
--   fn['dein#save_state']()
-- end

-- local removed_plugins = fn['dein#check_clean']()

-- if fn.len(removed_plugins) > 0 then
--   fn.map(removed_plugins, "delete(v:val, 'rf')")
--   fn['dein#recache_runtimepath']()
-- end

-- Colourscheme config
--[[ vim.g.everforest_background = "hard"
vim.g.everforest_enable_italic = 1
vim.g.everforest_diagnostic_text_highlight = 1
vim.g.everforest_diagnostic_virtual_text = "colored"
vim.g.everforest_current_word = "bold" ]]

-- Load the colorscheme
cmd([[colorscheme gruvbox-material]]) -- Put your favorite colorscheme here

g.gruvbox_material_enable_bold = 1
g.gruvbox_material_enable_italic = 1
g.gruvbox_material_statusline_style = 'original'
g.gruvbox_material_palette = 'original'

opt.background = 'dark'
opt.backspace = {"indent", "eol", "start"}
opt.clipboard = "unnamedplus"
opt.completeopt = "menuone,noselect"
opt.cursorline = true
opt.encoding = "utf-8" -- Set default encoding to UTF-8
opt.expandtab = true -- Use spaces instead of tabs
opt.foldenable = false
opt.foldmethod = "indent"
opt.formatoptions = "l"
opt.hidden = true -- Enable background buffers
opt.hlsearch = true -- Highlight found searches
opt.ignorecase = true -- Ignore case
opt.inccommand = "split" -- Get a preview of replacements
opt.incsearch = true -- Shows the match while typing
opt.joinspaces = false -- No double spaces with join
opt.linebreak = true -- Stop words being broken on wrap
opt.list = false -- Show some invisible characters
opt.number = true -- Show line numbers
opt.numberwidth = 5 -- Make the gutter wider by default
opt.scrolloff = 4 -- Lines of context
opt.shiftround = true -- Round indent
opt.shiftwidth = 4 -- Size of an indent
opt.showmode = false -- Don't display mode
opt.sidescrolloff = 8 -- Columns of context
opt.signcolumn = "yes:1" -- always show signcolumns
opt.smartcase = true -- Do not ignore case with capitals
opt.smartindent = true -- Insert indents automatically
opt.spelllang = "en"
opt.splitbelow = true -- Put new windows below current
opt.splitright = true -- Put new windows right of current
opt.tabstop = 4 -- Number of spaces tabs count for
opt.termguicolors = true -- You will have bad experience for diagnostic messages when it's default 4000.
opt.wrap = true
-- opt.cc = "80"
opt.mouse = "a"

map('', '<up>', '<nop>')
map('', '<down>', '<nop>')
map('', '<left>', '<nop>')
map('', '<right>', '<nop>')
